'use strict';

const $ = require('jquery.js'),
      electron = require('electron'),
	  shortcut = electron.remote.globalShortcut,
      wino = electron.remote.getCurrentWindow(),
      robot = require('robotjs'),
      base = {
          "name": "Base",
          "script": []
      },
      newItem = -7;

// used to run and allow termination of automation scripts
let subprocess;

exports.init = function(container)
{
    // push contents of the scripts array in storage into the container as clickable items
    // ----------------------------------------------------------------------------------
        push(get(), container);
    // ----------------------------------------------------------------------------------

    // used for tracking mouse and showing cursor position - helps with script building
    // ----------------------------------------------------------------------------------
        let mouseTracking;
    // ----------------------------------------------------------------------------------

    // handle menu options and funcationality switching when edit is open/closed
    // ----------------------------------------------------------------------------------
        let menu = container.next('menu'),
        edit = $('edit', container);

        menu.on('click', '#save', function()
        {
            let edit = $('edit', container),
                index = edit.data('index'),
                name = $('name', edit).text(),
                script = $('actions', edit)[0].innerText.split('\n');

            save(index, { "name": name, "script": script });
            clearInterval(mouseTracking);
            $('#back', menu).trigger('click');
        });

        menu.on('click', '#add', function()
        {
            save(newItem, base);
            push(get(), container);
        });
    // ----------------------------------------------------------------------------------


    // handle menu options and funcationality switching when edit is open
    // ----------------------------------------------------------------------------------
        container.on('click', 'item', function()
        {
            let item = $(this),
                edit = $('edit', container),
                index = item.data('index'),
                automate = get(index);

            // display an overlay with a text input for changing and/or saving
            $('name', edit).text(automate.name);
            $('actions', edit).text(automate.script.join('\n'));
            edit.data('index', index).css('display', 'grid');
            $('#back', menu).attr('link', 'automate');
            $('#add', menu).hide();
            $('#save', menu).show();

            mouseTracking = setInterval(function()
            {
                let mousePos = robot.getMousePos();
                $('mousepos', container).html('&lt;mouse&gt;&nbsp;&nbsp;<x>x: ' + mousePos.x + '</x><y>y: ' + mousePos.y + '</y>');
            }, 1000);
        });
    // ----------------------------------------------------------------------------------


    // handle right-click behavior (context menu with "Delete" and "Edit" options)
    // ----------------------------------------------------------------------------------
        let contextMenu, contextItem;

        contextMenu = electron.remote.Menu.buildFromTemplate(
        [
            {
                label: 'Edit (Default)',
                click: function()
                { contextItem.trigger('click'); }
            },
            {
                label: 'Run',
                click: function()
                {
                    let index = contextItem.data('index'),
                        items = get(),
                        script = items[index].script;

                    items[index].lastRun = timestamp();
                    save(index, items[index]);
                    push(items, container);

                    subprocess = require('child_process').fork(__dirname + '/automate.process.js');
                    subprocess.send(script);

                    // allow for quick kill of runaway process
                    shortcut.register('CommandOrControl+K', function()
                    { subprocess.kill(); });

                    subprocess.on('exit', function()
                    { shortcut.unregister('CommandOrControl+K'); });
                }
            },
            { type: 'separator' },
            {
                label: 'Delete',
                click: function()
                {
                    let automates = get();
                    automates.splice(contextItem.data('index'), 1);
                    localStorage.automates = JSON.stringify(automates);
                    push(automates, container);
                }
            }
        ]);

        container.on('contextmenu', 'list item', function(event)
        {
            event.stopPropagation();
            event.preventDefault();
            contextItem = $(this);
            contextMenu.popup(wino);
        });
    // ----------------------------------------------------------------------------------


    // handle searching through storage using the input box on the page
    // ----------------------------------------------------------------------------------
        container.on('keyup', 'input', function()
        {
            let input = $(this),
                items = get(),
                filterBy = new RegExp(input.val(), 'i');

            items.forEach(function(item, index)
            {
                if (!item.name.match(filterBy) && !item.script.join('').match(filterBy))
                { items[index] = undefined; }
            });

            push(items, container);
        });
    // ----------------------------------------------------------------------------------
}

function get(index)
{
    let automates;
    try { automates = JSON.parse(localStorage.automates); }
    catch (e) {
        automates = [ base ];
    }
    return typeof index !== typeof undefined ? automates[index] : automates;
}

function save(index, item)
{
    let automates = get();

    if (index === newItem)
    { automates.push(item); }

    else
    { automates[index] = item; }

    localStorage.automates = JSON.stringify(automates);
}

function push(items, container)
{
    let list = $('list', container);
    list.html('');
    items.forEach(function(item, index)
    {
        if (typeof item === typeof undefined) return true;

        let display = $('<div/>').text(item.name.substring(0, 120)).html() + (item.name.length > 120 ? '&hellip;' : ''),
            domElement = $('<item><name>' + display + '</name></item>'),
            lastRun = typeof item.lastRun !== typeof undefined ? item.lastRun : 'Never';
        domElement.append('<run>Last Run: ' + lastRun + '</run>');
        domElement.data('index', index);
        list.append(domElement);
    });
}

function timestamp()
{
    let date = new Date(),
        year = date.getFullYear(),
        month = date.getMonth() + 1,
        day = date.getDate(),
        hour = date.getHours(),
        minute = date.getMinutes(),
        second = date.getSeconds();

    month = month < 10 ? '0' + month : month;
    day = day < 10 ? '0' + day : day;
    hour = hour < 10 ? '0' + hour : hour;
    minute = minute < 10 ? '0' + minute : minute;
    second = second < 10 ? '0' + second : second;

    return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;
}