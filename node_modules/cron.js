'use strict';

const $ = require('jquery.js'),
      electron = require('electron'),
      wino = electron.remote.getCurrentWindow(),
      exec = require('child_process').exec,
      highlight = require('highlight.js'),
      base = {
          "name": "Base",
          "cmd": "",
          "start": timestamp(),
          "days": [],
          "interval": "1-day",
          "timeout": "30-minute"
      },
      newCron = -7;

exports.init = function(container)
{
    // push contents of the crons array in storage into the container as clickable items
    // ----------------------------------------------------------------------------------
        let crons = get();
        push(crons, container);
    // ----------------------------------------------------------------------------------


    // handle menu options and funcationality switching when edit is open/closed
    // ----------------------------------------------------------------------------------
        let menu = container.next('menu'),
        edit = $('edit', container);

        menu.on('click', '#save', function()
        {
            let edit = $('edit', container),
                index = edit.data('index'),
                value = edit.text();

            save(index, value);
            $('#back', menu).trigger('click');
        });

        menu.on('click', '#add', function()
        {
            save(newCron, base);
            push(get(), container);
        });
    // ----------------------------------------------------------------------------------


    // handle menu options and funcationality switching when edit is open
    // ----------------------------------------------------------------------------------
        container.on('click', 'item', function()
        {
            let item = $(this),
                index = item.data('index'),
                cron = get(index);

            // display an overlay with a text input for changing and/or saving
            $('edit', container).html(highlight.json(cron))
                                .data('index', index)
                                .show();
            $('#back', menu).attr('link', 'cron');
            $('#add', menu).hide();
            $('#save', menu).show();
        });
    // ----------------------------------------------------------------------------------


    // handle right-click behavior (context menu with "Delete" and "Edit" options)
    // ----------------------------------------------------------------------------------
        let contextMenu, contextItem;

        contextMenu = electron.remote.Menu.buildFromTemplate(
        [
            {
                label: 'Edit (Default)',
                click: function()
                { contextItem.trigger('click'); }
            },
            { type: 'separator' },
            {
                label: 'Delete',
                click: function()
                {
                    let crons = get();
                    crons.splice(contextItem.data('index'), 1);
                    localStorage.crons = JSON.stringify(crons);
                    push(crons, container);
                }
            }
        ]);

        container.on('contextmenu', 'list item', function(event)
        {
            event.stopPropagation();
            event.preventDefault();
            contextItem = $(this);
            contextMenu.popup(wino);
        });
    // ----------------------------------------------------------------------------------


    // handle searching through storage using the input box on the page
    // ----------------------------------------------------------------------------------
        container.on('keyup', 'input', function()
        {
            let input = $(this),
                items = get(),
                filterBy = new RegExp(input.val(), 'i');

            items.forEach(function(item, index)
            {
                if (!item.name.match(filterBy) && !item.cmd.match(filterBy))
                { items[index] = undefined; }
            });

            push(items, container);
        });
    // ----------------------------------------------------------------------------------
}

exports.run = function(container)
{
    let crons = get();
    crons.forEach(function(cron, index)
    {
        let start = date(cron.start);
        let lastRun = typeof cron.lastRun !== typeof undefined && cron.lastRun.trim() !== '' ? date(cron.lastRun) : start;

        // only run on specified days
        if (cron.days.length > 0 && cron.days.indexOf(day()) === -1)
        { return true; }

        // only run on or after the specified interval
        if (interval(lastRun, cron.interval) === false)
        { return true; }

        exec(cron.cmd, options(cron), function(error, stdout, stderr)
        {
            if (error) return;
            cron.lastRun = timestamp();
            save(index, cron);
        });
    });

    if (container.length)
    { push(get(), container); }
}

function get(index)
{
    let crons;
    try { crons = JSON.parse(localStorage.crons); }
    catch (e) {
        crons = [ base ];
    }
    return typeof index !== typeof undefined ? crons[index] : crons;
}

function save(index, cron)
{
    let crons = get();
    cron = typeof cron === typeof '' ? JSON.parse(cron) : cron;

    if (index === newCron)
    { crons.push(cron); }

    else
    { crons[index] = cron; }

    localStorage.crons = JSON.stringify(crons);
}

function push(crons, container)
{
    let list = $('list', container);
    list.html('');

    crons.forEach(function(item, index)
    {
        if (typeof item === typeof undefined) return true;

        let display = $('<div/>').text(item.name.substring(0, 120)).html() + (item.name.length > 120 ? '&hellip;' : ''),
            domElement = $('<item><name>' + display + '</name></item>'),
            lastRun = typeof item.lastRun !== typeof undefined ? item.lastRun : 'Never';
        domElement.append('<run>Last Run: ' + lastRun + '</run>');
        domElement.data('index', index);
        list.append(domElement);
    });
}

function date(string)
{ return new Date(Date.parse(string)); }

function interval(startDate, interval)
{
    let parts = interval.split('-'),
        currentDate = new Date(),
        number = parseInt(parts[0]),
        intervalMs = 0;

    switch (parts[1])
    {
        case 'second': intervalMs = number * 1000; break;
        case 'minute': intervalMs = number * 60 * 1000; break;
        case 'hour': intervalMs = number * 60 * 60 * 1000; break;
        case 'day': intervalMs = number * 60 * 60 * 24 * 1000; break;
        case 'week': intervalMs = number * 60 * 60 * 24 * 7 * 1000; break;
        case 'month':
            let sameDayOfMonth = startDate.getDate() === (new Date()).getDate();
            if (number === 1 && sameDayOfMonth) return true;

            let roughIntervalTime = new Date(round(startDate.getTime() + (number * 60 * 60 * 30.43 * 7 * 4 * 1000)));
            if (currentDate.getTime() >= roughIntervalTime && sameDayOfMonth) return true;
        return false;
    }

    let afterStart = currentDate.getTime() > startDate.getTime(),
        afterInterval = (currentDate.getTime() % startDate.getTime()) / intervalMs > 1;
    return afterStart && afterInterval ? true : false;
}

function day()
{
    let date = new Date(),
        days = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];
    return days[date.getDay()];
}

function options(cron)
{
    let options = {
        encoding: 'utf8',
        timeout: 0,
        maxBuffer: 200 * 1024,
        killSignal: 'SIGTERM',
        cwd: null,
        env: null
    };

    if (typeof cron.timeout !== typeof undefined)
    {
        let parts = cron.interval.split('-'),
            number = parseInt(parts[0]),
            timeoutMs = 0;

        switch (parts[1])
        {
            case 'second': timeoutMs = number * 60 * 1000;
            case 'minute': timeoutMs = number * 60 * 1000; break;
            case 'hour': timeoutMs = number * 60 * 60 * 1000; break;
            case 'day': timeoutMs = number * 60 * 60 * 24 * 1000; break;
        }

        options.timeout = timeoutMs;
    }

    return options;
}

function timestamp()
{
    let date = new Date(),
        year = date.getFullYear(),
        month = date.getMonth() + 1,
        day = date.getDate(),
        hour = date.getHours(),
        minute = date.getMinutes(),
        second = date.getSeconds();

    month = month < 10 ? '0' + month : month;
    day = day < 10 ? '0' + day : day;
    hour = hour < 10 ? '0' + hour : hour;
    minute = minute < 10 ? '0' + minute : minute;
    second = second < 10 ? '0' + second : second;

    return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;
}