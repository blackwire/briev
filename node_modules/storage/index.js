'use strict';

const $ = require('jquery.js'),
      electron = require('electron'),
      wino = electron.remote.getCurrentWindow(),
      Menu = electron.remote.Menu,
      MenuItem = electron.remote.MenuItem,
      A = 'all';

exports.init = function(container)
{
    // push contents of the clipboard into the container as clickable items
    // ----------------------------------------------------------------------------------
        let clipboard = get(localStorage.selectedClipboardIndex);
        push(clipboard, container, localStorage.selectedClipboardIndex);
    // ----------------------------------------------------------------------------------

    // when an item is clicked copy its contents to the system clipboard
    // ----------------------------------------------------------------------------------
        container.on('click', 'item', function()
        {
            let option = $(this),
                clipboardIndex = option.data('clipboardIndex'),
                index = option.data('index'),
                contents = get(clipboardIndex, index);

            if (contents.indexOf('data:image/png;base64') === 0)
            {
                let img = electron.nativeImage.createFromDataURL(contents);
                electron.clipboard.writeImage(img);
            }

            else
            { electron.clipboard.writeText(contents); }

            reload(container, localStorage.clipboardIndex);
            // todo: overlay a checkmark when clicked
        });
    // ----------------------------------------------------------------------------------


    // handle menu options and funcationality switching when edit is open/closed
    // ----------------------------------------------------------------------------------
        let menu = container.next('menu'),
            edit = $('edit', container);

        menu.on('click', '#one, #two, #all', function()
        {
            let option = $(this),
                filtered = [];

            switch (option.attr('id'))
            {
                case 'one':
                    filtered = get(1);
                    localStorage.selectedClipboardIndex = 1;
                break;
                case 'two':
                    filtered = get(2);
                    localStorage.selectedClipboardIndex = 2;
                break;
                case 'all':
                    filtered = get();
                    localStorage.selectedClipboardIndex = A;
                break;
            }

            $('#one, #two, #all', menu).removeClass('active');
            push(filtered, container, localStorage.selectedClipboardIndex);
            option.addClass('active');
        });

        menu.on('click', '#save', function()
        {
            let edit = $('edit', container),
                clipboardIndex = edit.data('clipboardIndex'),
                index = edit.data('index'),
                value = edit.text();

            save(clipboardIndex, index, value);
            $('#back', menu).trigger('click');
        });

        menu.on('click', '#delete', function()
        {
            if (localStorage.selectedClipboardIndex === A)
            {
                localStorage.removeItem('clipboard');
                push(get(), container);
            }

            else
            {
                save(localStorage.selectedClipboardIndex, null, []);
                push([], container, localStorage.selectedClipboardIndex);
            }
        });
    // ----------------------------------------------------------------------------------


    // handle right-click behavior (context menu with "Delete" and "Edit" options)
    // ----------------------------------------------------------------------------------
        let contextMenu, contextItem;

        contextMenu = Menu.buildFromTemplate(
        [
            {
                label: 'Copy (Default)',
                click: function()
                { contextItem.trigger('click'); }
            },
            {
                label: 'Edit',
                click: function()
                {
                    let clipboardIndex = contextItem.data('clipboardIndex'),
                        index = contextItem.data('index'),
                        clip = get(clipboardIndex, index);

                    $('edit', container).text(clip)
                                        .data('clipboardIndex', clipboardIndex)
                                        .data('index', index)
                                        .show();
                    $('#back', menu).attr('link', 'storage');
                    $('#save', menu).show();
                    $('#delete', menu).hide();
                }
            },
            { type: 'separator' },
            {
                label: 'Delete',
                click: function()
                {
                    let clipboardIndex = contextItem.data('clipboardIndex'),
                        index = contextItem.data('index'),
                        clipboard = get(clipboardIndex);

                    if (index === (clipboard.length - 1))
                    { electron.clipboard.clear(); }

                    clipboard.splice(index, 1);
                    save(clipboardIndex, null, clipboard);
                    push(clipboard, container, clipboardIndex);
                }
            }
        ]);

        container.on('contextmenu', 'list item', function(event)
        {
            event.stopPropagation();
            event.preventDefault();
            contextItem = $(this);
            contextMenu.popup(wino);
        });
    // ----------------------------------------------------------------------------------


    // handle searching through storage using the input box on the page
    // ----------------------------------------------------------------------------------
        container.on('keyup', 'input', function()
        {
            let input = $(this),
                clipboardIndex = localStorage.selectedClipboardIndex,
                clipboard = get(clipboardIndex),
                filterBy = new RegExp(input.val().replace(/[-[\]{}()*+?.,\\/^$|#\s]/g, '\\$&'), 'i');

            if (typeof clipboard[1] === typeof [] && typeof clipboard[2] === typeof [])
            {
                clipboard[1].forEach(function(value, index)
                {
                    if (!value.match(filterBy))
                    { clipboard[1][index] = ''; }
                });

                clipboard[2].forEach(function(value, index)
                {
                    if (!value.match(filterBy))
                    { clipboard[2][index] = ''; }
                });
            }

            else
            {
                clipboard.forEach(function(value, index)
                {
                    if (!value.match(filterBy))
                    { clipboard[index] = ''; }
                });
            }

            push(clipboard, container, localStorage.selectedClipboardIndex);
        });
    // ----------------------------------------------------------------------------------
}

exports.save = function(container)
{
    if (typeof localStorage.clipboardIndex === typeof undefined)
    { localStorage.clipboardIndex = 1; }

    if (typeof localStorage.selectedClipboardIndex === typeof undefined)
    { localStorage.selectedClipboardIndex = A; }

    if (typeof localStorage.clipboard === typeof undefined)
    { localStorage.clipboard = JSON.stringify({ 1: [], 2: [] }); }

    reload(container, localStorage.clipboardIndex);
}

exports.switch = function(index)
{
    electron.clipboard.clear();
    localStorage.clipboardIndex = index;

    let clipboard = get(index);
    clipboard.forEach(function(value)
    {
        if (value.indexOf('data:image/png;base64') === 0)
        {
            let img = electron.nativeImage.createFromDataURL(value);
            electron.clipboard.writeImage(img);
        }

        else
        { electron.clipboard.writeText(value); }

        return false;
    });
}

function reload(container, clipboardIndex)
{
    if (typeof clipboardIndex !== typeof undefined)
    {
        let clipboard = get(clipboardIndex),
            size = clipboard.length,
            lastStored = size === 0 ? null : clipboard[size - 1],
            lastClipped = clip();

        if (lastStored == lastClipped || lastClipped === null)
        { return; }

        for (let i = 0; i < 20; i++)
        { if (clipboard[i] == lastClipped) clipboard.splice(i === 0 ? 0 : i--, 1); }

        if (size > 20)
        { clipboard.shift(); }

        clipboard.push(lastClipped);
        save(clipboardIndex, null, clipboard);
    }

    let selected = localStorage.selectedClipboardIndex;
    if (container.length && (clipboardIndex === selected || selected === A))
    {
        $('option.active', container.next('menu')).trigger('click');
        let input = $('input', container);
        if (input.val().length)
        { input.trigger('keyup'); }
    }
}

function get(clipboardIndex, index)
{
    let clipboard;

    if (typeof clipboardIndex === typeof undefined || clipboardIndex === A)
    {
        try { clipboard = JSON.parse(localStorage.clipboard); }
        catch (e) { clipboard = { 1: [], 2: [] }; }
        return clipboard;
    }

    try { clipboard = JSON.parse(localStorage.clipboard)[clipboardIndex]; }
    catch (e) { clipboard = []; }
    return typeof index !== typeof undefined ? clipboard[index] : clipboard;
}

function save(clipboardIndex, index, clip)
{
    let clipboard = get();

    if (typeof clip === typeof [])
    { clipboard[clipboardIndex] = clip; }

    else
    {
        clipboard[clipboardIndex][index] = clip;
        if (index === (clipboard[clipboardIndex].length - 1))
        { electron.clipboard.writeText(clip); }
    }

    localStorage.clipboard = JSON.stringify(clipboard);
}

function clip()
{
    let formats = electron.clipboard.availableFormats(),
        text = '';

    if (formats.indexOf('image/png') !== -1 && formats.length === 1)
    { return electron.clipboard.readImage().toDataURL(); }

    if (formats.indexOf('text/plain') !== -1)
    { text = electron.clipboard.readText(); }

    else
    { return null; }

    if (formats.indexOf('image/png') !== -1)
    { return text.match(/\.(png|jpg|gif)$/) ? electron.clipboard.readImage().toDataURL() : null; }

    if (text.trim() === '') return null;

    let replacements = {
        '(’|‘|â|â)' : '\'',
        '(”|“|â|â)' : '"'
    };

    for (let key in replacements)
    {
        if (!replacements.hasOwnProperty(key))
        { continue; }

        let regex = new RegExp(key, 'gi');
        text = text.replace(regex, replacements[key]);
    }

    return text;
}

function push(clipboard, container, clipboardIndex, recursion)
{
    let list = $('list', container);

    if (typeof clipboard[1] === typeof [] && typeof clipboard[2] === typeof [])
    {
        list.html('');
        push(clipboard[2], container, 2, true);
        push(clipboard[1], container, 1, true);
        return;
    }

    if (!recursion)
    { list.html(''); }

    clipboard.forEach(function(item, index)
    {
        if (typeof item !== typeof '' || item.trim().length === 0) return true;
        let display = '';

        if (item.indexOf('data:image/png;base64') === 0)
        {
            display += '<img style="background-image:url(' + item + ')" src="' + item + '" />';
            display += '<imgdata>' + $('<div/>').text(item.substring(0, 120)).html() + (item.length > 120 ? '&hellip;' : '') + '</imgdata>';
        }

        else
        { display += $('<div/>').text(item.substring(0, 120)).html() + (item.length > 120 ? '&hellip;' : ''); }

        let domElement = $('<item>' + display + '</item>');
        domElement.data('clipboardIndex', clipboardIndex);
        domElement.data('index', index);

        list.prepend(domElement);
    });
}