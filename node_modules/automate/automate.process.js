process.on('message', function(script)
{
    let robot = require('robotjs'),
        heldKeys = {};

    let execute = function(action)
    {
        if (!action || action.trim() === '')
        { return 0; }

        let parts = action.match(/^([^\.]+)\.([^\(]+)\((.+)\)$/i),
            type = parts[1],
            method = parts[2],
            args = parts[3].split(','),
            rawArgs = parts[3];

        args.forEach(function(value, key)
        { args[key] = value === ' ' ? value : value.trim(); });

        switch (type)
        {
            case 'mouse':
                switch (method)
                {
                    case 'move':
                        let moveX = args[0],
                            moveY = args[1],
							speed = args[2] === 'slow' ? 'slow' : 'fast';
						
						if (speed === 'slow')
                        { robot.moveMouseSmooth(moveX, moveY); }
						
						else if (speed === 'fast')
						{ robot.moveMouse(moveX, moveY); }
                    break;
                    case 'click':
                        let button = args[0],
                            double = args[1] === 'double' ? true : false;
                        robot.mouseClick(button, double);
                    break;
                    case 'drag':
                        let dragToX = args[0],
                            dragToY = args[1];
                        robot.mouseToggle('down', 'left');
                        robot.moveMouseSmooth(dragToX, dragToY);
                        robot.mouseToggle('up', 'left');
                    break;
                    case 'scroll':
                        let horizontalScrollAmount = args[0],
                            verticalScrollAmount = args[1];
                        robot.scrollMouse(horizontalScrollAmount, verticalScrollAmount);
                    break;
                }
            break;
            case 'keyboard':
                switch (method)
                {
                    case 'holdKey':
                        let keyToHold = args[0];
                        heldKeys[keyToHold] = true;
                    break;
                    case 'releaseKey':
                        let keyToRelease = args[0];
                        heldKeys[keyToRelease] = false;
                    break;
                    case 'tapKey':
                        let keyToTap = args[0],
                            tapMods = [];

                        if (keyToTap === ' ') keyToTap = 'space';

                        for (var key in heldKeys)
                        {
                            if (heldKeys.hasOwnProperty(key) && heldKeys[key])
                            {
                                switch (key)
                                {
                                    case 'ctrl': key = 'control'; break;
                                    case 'shift': key = 'shift'; break;
                                    case 'win': key = 'command'; break;
                                    case 'cmd': key = 'command'; break;
                                    case 'alt': key = 'alt'; break;
                                    default: key = false;
                                }

                                if (key)
                                { tapMods.push(key); }
                            }
                        }

                        if (tapMods.length)
                        { robot.keyTap(keyToTap, tapMods); }

                        else
                        { robot.keyTap(keyToTap); }
                    break;
                    case 'type':
                        let string = rawArgs;
                        if (heldKeys['shift'])
                        { string = string.toUpperCase(); }
                        robot.typeStringDelayed(string, 4000);
                    break;
                }
            break;
            case 'sleep':
                if (isNaN(args[0]) ? true : ((0 | parseFloat(args[0])) !== parseFloat(args[0])))
                { return 0; }

                switch (method)
                {
                    case 'second': return 1000 * parseInt(args[0]);
                    case 'minute': return 1000 * 60 * parseInt(args[0]);
                }
            break;
        }

        return 0;
    };

    let run = function(actions)
    {
        if (actions.length === 0)
        { heldKeys = {}; return; }

        let sleep = 0,
            remaining = [];

        actions.forEach(function(action)
        {
            if (sleep)
            { remaining.push(action); return true; }

            sleep = execute(action);
        });

        let end = (new Date()).getTime() + sleep;
        while ((new Date()).getTime() < end);
        run(remaining);
    };

    run(script);

    process.exit();
});