'use strict';

const $ = require('jquery.js'),
      electron = require('electron'),
      Menu = electron.remote.Menu,
      MenuItem = electron.remote.MenuItem,
      fileSaver = require('file-saver');

exports.init = function(container)
{
    let lastKey = null,
        paste = $('#paste', container);

    // handle ctrl+v behavior
    // ----------------------------------------------------------------------------------
        container.closest('body').on('keydown', function(event)
        {
            let key = event.which || event.keyCode;
            if ((lastKey === 91 || lastKey === 17) && key === 86)
            { if (save() && paste.hasClass('waiting')) toggle(paste); }

            lastKey = key;
        });

        container.closest('body').on('keyup', function(event)
        { lastKey = null; });
    // ----------------------------------------------------------------------------------


    // handle click behavior
    // (save if not already and if saved then toggle back to waiting)
    // ----------------------------------------------------------------------------------
        container.on('click', '#paste', function()
        {
            if (paste.hasClass('waiting'))
            { if (!save()) return; }

            paste.data('clipboardIndex', localStorage.clipboardIndex);
            toggle(paste);
        });
    // ----------------------------------------------------------------------------------


    // handle right-click behavior (context menu with "Save As" option)
    // ----------------------------------------------------------------------------------
        let contextMenu = new Menu();
        contextMenu.append(new MenuItem(
        {
            label: 'Save As...',
            click: function()
            {
                let data = JSON.parse(localStorage.clipboard)[localStorage.clipboardIndex],
                    blob = new Blob([data[data.length - 1]], { type: 'text/plain;charset=utf-8' });
                fileSaver.saveAs(blob, 'file.txt');
            }
        }));

        container.on('contextmenu', '#paste.saved', function(event)
        {
            event.stopPropagation();
            event.preventDefault();
            contextMenu.popup(electron.remote.getCurrentWindow());
        });
    // ----------------------------------------------------------------------------------


    // add in drag and drop functionality to paste icon that is built into electron
    // ----------------------------------------------------------------------------------
        paste.get(0).addEventListener('dragstart', function(event)
        {
            if (paste.hasClass('saved'))
            {
                let data = JSON.parse(localStorage.clipboard)[localStorage.clipboardIndex],
                    url = URL.createObjectURL(new File([data[data.length - 1]], 'file.txt'));
                event.dataTransfer.setData('DownloadURL', 'application/octet-stream:file.txt:' + url);
                paste.data('dragging', true);
            }
        },
        false);

        paste.get(0).addEventListener('dragend', function(event)
        {
            if (paste.hasClass('saved'))
            {
                setTimeout(function()
                { paste.data('dragging', false); }, 500);
            }
        },
        false);
    // ----------------------------------------------------------------------------------
}

function save()
{
    let clipboard = function()
        {
            let clipboard;
            try { clipboard = JSON.parse(localStorage.clipboard)[localStorage.clipboardIndex]; }
            catch (e) { clipboard = []; }
            return clipboard;
        }(),
        size = clipboard.length,
        lastStored = size === 0 ? null : clipboard[size - 1],
        lastClipped = clip();

    if (lastStored == lastClipped || lastClipped === null)
    { return true; }

    for (let i = 0; i < 20; i++)
    { if (clipboard[i] == lastClipped) clipboard.splice(i === 0 ? 0 : i--, 1); }

    if (size > 20)
    { clipboard.shift(); }

    clipboard.push(lastClipped);

    let fullClipboard = JSON.parse(localStorage.clipboard);
    fullClipboard[localStorage.clipboardIndex] = clipboard;
    localStorage.clipboard = JSON.stringify(fullClipboard);
    return true;
}

function clip()
{
    let formats = electron.clipboard.availableFormats(),
        text = '';

    if (formats.indexOf('image/png') !== -1 && formats.length === 1)
    { return electron.clipboard.readImage().toDataURL(); }

    if (formats.indexOf('text/plain') !== -1)
    { text = electron.clipboard.readText(); }

    else
    { return null; }

    if (formats.indexOf('image/png') !== -1)
    { return text.match(/\.(png|jpg|gif)$/) ? electron.clipboard.readImage().toDataURL() : null; }

    if (text.trim() === '') return null;

    let replacements = {
        '(’|‘|â|â)' : '\'',
        '(”|“|â|â)' : '"'
    };

    for (let key in replacements)
    {
        if (!replacements.hasOwnProperty(key))
        { continue; }

        let regex = new RegExp(key, 'gi');
        text = text.replace(regex, replacements[key]);
    }

    electron.clipboard.writeText(text);
    return text;
}

function toggle(paste)
{
    paste.toggleClass('saved')
         .toggleClass('waiting')
         .prop('draggable', !paste.prop('draggable'));
}