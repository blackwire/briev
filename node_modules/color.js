'use strict';

let $ = require('jquery.js');

exports.init = function(container)
{
    let hexInput = $('#hex', container),
        rgbInput = $('#rgb', container),
        hslInput = $('#hsl', container),
        example = $('example', container),
        hues = $('hue', container),
        saturations = $('saturation', container),
        luminances = $('luminance', container);

    // fill in all the hue selection options with their respective colors
    // ----------------------------------------------------------------------------------
        let hue = 0;
        hues.each(function()
        {
            let hsl = 'hsl(' + (hue++) + ', 100%, 50%)';
            $(this).css('background-color', hsl).data('hsl', hsl);
        });
    // ----------------------------------------------------------------------------------


    // handle click behavior for colors
    // (if a color is clicked it should change the example color and all the color inputs)
    // ----------------------------------------------------------------------------------
        container.on('click', 'hue, saturation, luminance', function()
        {
            let hsl = $(this).data('hsl'),
                rgb = HSLToRGB(hsl),
                hex = RGBToHex(rgb),
                components = HSLToComponents(hsl);

            rgb = HSLToRGB(hsl);

            if (hex !== false && hsl !== false && components !== false && rgb !== false)
            {
                hexInput.val(hex);
                hslInput.val(hsl);
                rgbInput.val(rgb);
                localStorage.colorHex = hex;
                example.css('background-color', hsl).data('hsl', hsl);
                setVariations(saturations, luminances, components);
            }
        });
    // ----------------------------------------------------------------------------------


    // handle changing of the example color and all
    // associated color options when inputs change
    // ----------------------------------------------------------------------------------
        hexInput.keyup(function()
        {
            let value = $(this).val(),
                rgb = hexToRGB(value),
                hsl = RGBToHSL(rgb),
                components = HSLToComponents(hsl);

            if (rgb !== false && hsl !== false && components !== false)
            {
                rgbInput.val(rgb);
                hslInput.val(hsl);
                localStorage.colorHex = value;
                example.css('background-color', hsl).data('hsl', hsl);
                setVariations(saturations, luminances, components);
            }
        });

        rgbInput.keyup(function()
        {
            let value = $(this).val(),
                hsl = RGBToHSL(value),
                hex = RGBToHex(value),
                components = HSLToComponents(hsl);

            if (hsl !== false && hex !== false && components !== false)
            {
                hslInput.val(hsl);
                hexInput.val(hex);
                localStorage.colorHex = hex;
                example.css('background-color', hsl).data('hsl', hsl);
                setVariations(saturations, luminances, components);
            }
        });

        hslInput.keyup(function()
        {
            let value = $(this).val(),
                rgb = HSLToRGB(value),
                hex = RGBToHex(rgb),
                components = HSLToComponents(value);

            if (rgb !== false && hex !== false && components !== false)
            {
                rgbInput.val(rgb);
                hexInput.val(hex);
                localStorage.colorHex = hex;
                example.css('background-color', value).data('hsl', value);
                setVariations(saturations, luminances, components);
            }
        });
    // ----------------------------------------------------------------------------------


    // pull last color selected from local storage
    // ----------------------------------------------------------------------------------
        if (typeof localStorage.colorHex !== typeof undefined)
        { hexInput.val(localStorage.colorHex); hexInput.trigger('keyup'); }
    // ----------------------------------------------------------------------------------
}

function hexToRGB(hex)
{
    if (hex === false) return;

    let red, green, blue;

    let parts = hex.match(/^#?([a-z0-9]{2})([a-z0-9]{2})([a-z0-9]{2})$/i);
    if (parts == null) return false;

    red = parseInt(parts[1], 16);
    green = parseInt(parts[2], 16);
    blue = parseInt(parts[3], 16);

    return 'rgba(' + red + ', ' + green + ', ' + blue + ', 1)';
}

function RGBToHex(rgb)
{
    if (rgb === false) return;

    let hue, saturation, luminance, alpha,
    red, green, blue;

    let parts = rgb.match(/^rgba?\(([0-9]{1,3})\,\s*([0-9]{1,3})\,\s*([0-9]{1,3})\,?\s*([0-1]?\.?[0-9]{0,2})?\)$/i);
    if (parts == null) return false;

    red = hex(parts[1]);
    green = hex(parts[2]);
    blue = hex(parts[3]);

    return '#' + red + green + blue;
}

function HSLToRGB(hsl)
{
    if (hsl === false) return;

    let hue, saturation, luminance, alpha,
        red, green, blue;

    let parts = hsl.match(/^hsla?\(([0-9]{1,3})\,\s*([0-9]{1,3})\%\,\s*([0-9]{1,3})\%\,?\s*([0-1]?\.?[0-9]{0,2})?\)$/i);
    if (parts == null) return false;

    hue = parseInt(parts[1]) / 360;
    saturation = parseInt(parts[2]) / 100;
    luminance = parseInt(parts[3])/ 100;
    alpha = parseFloat(parts[4] || '1.0');

    // achromatic
    if (saturation == 0)
    { red = green = blue = luminance; }

    else
    {
        let x = luminance < 0.5 ? luminance * (1 + saturation) : (luminance + saturation) - (luminance * saturation);
        let y = 2 * luminance - x;
        red = hueToRGB(y, x, hue + 1/3);
        green = hueToRGB(y, x, hue);
        blue = hueToRGB(y, x, hue - 1/3);
    }

    red = Math.round(red * 255);
    green = Math.round(green * 255);
    blue = Math.round(blue * 255);
    alpha = (alpha === 1.0 ? 1 : alpha);

    return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
}

function RGBToHSL(rgb)
{
    if (rgb === false) return;

    let hue, saturation, luminance, alpha,
    red, green, blue;

    let parts = rgb.match(/^rgba?\(([0-9]{1,3})\,\s*([0-9]{1,3})\,\s*([0-9]{1,3})\,?\s*([0-1]?\.?[0-9]{0,2})?\)$/i);
    if (parts == null) return false;

    red = parseInt(parts[1]) / 255;
    green = parseInt(parts[2]) / 255;
    blue = parseInt(parts[3]) / 255;
    alpha = parseFloat(parts[4] || '1.0');

    let max = Math.max(red, green, blue),
        min = Math.min(red, green, blue);

    luminance = (max + min) / 2;

    // achromatic
    if (max == min)
    { hue = saturation = 0; }

    else
    {
        let x = max - min,
            y = max + min;

        switch (true)
        {
            case (luminance === 1): saturation = 1; break;
            case (luminance === 0): saturation = 0; break;
            case (luminance > 0.5): saturation = x / (2 - y); break;
            case (luminance <= 0.5): saturation = x / y; break;
        }

        switch (max)
        {
            case red: hue = (green - blue) / x + (green < blue ? 6 : 0); break;
            case green: hue = (blue - red) / x + 2; break;
            case blue: hue = (red - green) / x + 4; break;
        }
        hue /= 6;
    }

    hue = Math.round(hue * 360);
    saturation = Math.round(saturation * 100);
    luminance = Math.round(luminance * 100);
    alpha = (alpha === 1.0 ? 1 : alpha);

    return 'hsla(' + hue + ', ' + saturation + '%, ' + luminance + '%, ' + alpha + ')';
}

function hueToRGB(x, y, z)
{
    if (z < 0) z += 1;
    if (z > 1) z -= 1;
    if (z < 1/6) return x + (y - x) * 6 * z;
    if (z < 1/2) return y;
    if (z < 2/3) return x + (y - x) * (2/3 - z) * 6;
    return x;
}

function RGBToHue(rgb)
{
    if (rgb === false) return;

    let hue, saturation, luminance, alpha,
    red, green, blue;

    let parts = rgb.match(/^rgba?\(([0-9]{1,3})\,\s*([0-9]{1,3})\,\s*([0-9]{1,3})\,?\s*([0-1]?\.?[0-9]{0,2})?\)$/i);
    if (parts == null) return false;

    red = parseInt(parts[1]) / 255;
    green = parseInt(parts[2]) / 255;
    blue = parseInt(parts[3]) / 255;
    alpha = parseFloat(parts[4] || '1.0');

    let max = Math.max(red, green, blue),
        min = Math.min(red, green, blue);

    // achromatic
    if (max == min) return 0;

    let x = max - min;
    switch (max)
    {
        case red: hue = (green - blue) / x + (green < blue ? 6 : 0); break;
        case green: hue = (blue - red) / x + 2; break;
        case blue: hue = (red - green) / x + 4; break;
    }

    return Math.round((hue / 6) * 360);
}

function HSLToComponents(hsl)
{
    if (hsl === false) return;

    let hue, saturation, luminance, alpha;

    let parts = hsl.match(/^hsla?\(([0-9]{1,3})\,\s*([0-9]{1,3})\%\,\s*([0-9]{1,3})\%\,?\s*([0-1]?\.?[0-9]{0,2})?\)$/i);
    if (parts == null) return false;

    hue = parseInt(parts[1]);
    saturation = parseInt(parts[2]);
    luminance = parseInt(parts[3]);
    alpha = parseFloat(parts[4] || '1.0');

    return {
        hue: hue,
        saturation: saturation,
        luminance: luminance,
        alpha: alpha
    };
}

function hex(n)
{
    let hexChars = "0123456789ABCDEF";
    n = parseInt(n, 10);
    if (isNaN(n)) return "00";
    n = Math.max(0, Math.min(n, 255));
    return hexChars.charAt((n - n % 16) / 16) + hexChars.charAt(n % 16);
}

function setVariations(saturations, luminances, components)
{
    let saturation = 0;
    saturations.each(function()
    {
        let hsl = 'hsl(' + components.hue + ', ' + (saturation++) + '%, ' + components.luminance + '%)';
        $(this).css('background-color', hsl).data('hsl', hsl);
    });

    let luminance = 0;
    luminances.each(function()
    {
        let hsl = 'hsl(' + components.hue + ', ' + components.saturation + '%, ' + (luminance++) + '%)';
        $(this).css('background-color', hsl).data('hsl', hsl);
    });
}